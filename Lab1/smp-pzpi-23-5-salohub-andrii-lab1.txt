МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИКАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇЗвітз лабораторної роботи № 1 з дисципліниСкриптові мови програмуванняВиконала:                                                                         Перевірив:ст. гр. ПЗПІ-23-5                        				ст. викладач кафедри ПІСалогуб Андрій 						          Сокорчук Ігор ПетровичХарків 2025
ЗАВДАННЯ     Розробити Bash-скрипт, який обробляє експортований із сайту https://cist.nure.ua/ розклад занять для всіх груп потоку в форматі CSV та перетворює його у формат CSV для завантаження в Google Календар https://support.google.com/.          Вимоги до скрипта     Ім’я скрипта:     ~/{імʼя-облікового-запису}-task2     Синтаксис виклику:{	імʼя-облікового-запису}-task2 [--help | --version] | [[-q|--quiet] [академ_група] файл_із_cist.csv]     Приклад виклику:     pzpi-23-12-koval-vasyl-task2 'ПЗПІ-23-12' TimeTable_15_03_2025.csvКлючі:• --help — вивести довідку, завершити роботу та повернути успішний результат у батьківський процес• --version — вивести інформацію про версію, завершити роботу та повернути успішний результат у батьківський процес• -q або --quiet — не виводити інформацію в стандартний потік виведенняПараметри:• академ_група — назва академічної групи (шаблон)• файл_із_cist.csv — експортований CSV файл розкладу занять     Якщо при виклику скрипта не вказана академічна група або вхідний CSV файл, то скрипт повинен:1. Вивести меню вибору файла за допомогою команди select та сформувати відсортований за датою в іменах файлів (від старіших до новіших) список доступних у поточній директорії CSV файлів за шаблоном:     TimeTable_??_??_20??.csv2. Відкрити вибраний CSV файл та згенерувати список академічних груп, що містяться у файлі, відсортувати їх за алфавітом (sort, uniq) та вивести меню вибору групи за допомогою select.     Обробка файла:1. Читати вхідний CSV файл та вибирати рядки, що відповідають вибраній академічній групі.2. Визначити порядкий номер для кожного заняття (лекція, практичне заняття, лабораторна робота) із врахуванням того, що лабораторні роботи складаються із двох пар, а решта занять — із однієї пари.3. Створити поле «Subject» із поля «Тема» вхідного CSV файла, але БЕЗ назви академічної групи та дефіса на початку цього поля ("ПЗПІ-23-1 - ПрПА Пз DL ПЗПІ-23-1")4. Додати порядковий номер наприкінці теми (Subject) кожного заняття після крапки з комою (опис заняття; №1)5. Переформатувати дату та час до формату «mm/dd/yyyy, HH:MM AM|PM,» Gogle Календаря 12-годинний формат часу. Наприклад: 02/30/2025, 11:15 AM,6. Заповнити поле «Description» текстом із поля «Опис (Описание)» вхідного CSV файла7. Відформатувати дані відповідно до вимог Google Календаря https://support.google.com/calendar/.	8. Виводити створені для Google Календаря дані у стандартний потік виведення, якщо це не заблоковано ключем -q або --quiet9. Записати результат у новий файл із назвою:     Google_TimeTable_??_??_20??.csv     де ??_??_20?? — дата, що відповідає вхідному файлу.     Обробка помилок:• Якщо файл не знайдено або файл є недоступним для читання, вивести повідомлення про помилку в стандартний потік помилок та повернути код помилки.• Якщо група не знайдена у вибраному файлі, повідомити про це користувача та запропонувати вибір іншої групи.• Якщо група не вказана, але у вказаному файлі присутня лише одна група, створити CSV файл Google Календаря для цієї групи.• Якщо сталася помилка під час обробки файла, повідомити про це та завершити роботу з відповідним кодом помилки.     Команди, які рекомендується використати у скрипті:• select — створення меню вибору файла та групи• ls — отримання списку доступних CSV файлів• awk — фільтрація та обробка даних CSV файла• sort — сортування даних (груп, дат тощо)• uniq — усунення дублікатів у списку груп• tee — збереження вихідних даних у файл та вивід на екран• cat — перегляд вмісту файла• sed — видалення зайвих пробілів, форматування дат, заміна символів• iconv — перетворення кодування файлів (Windows-1251 → UTF-8)     Результат роботи скрипта:• При виконанні скрипта створюється CSV файл, готовий для імпорту в Google Календар.• Послідовність полів у CSV файлі: Subject, Start date, Start time, End date, End time, Description• Файл містить коректно відформатовані дані про розклад занять для вибраної академічної групи.   Додаткові вимоги до скрипта:• Скрипт має необхідні права доступу:o Файл скрипта виконуваний для всіх користувачівo Редагування файла скрипта дозволене лише власнику файла
ХІД РОБОТИ     Розроблено Bash-скрипт, призначений для обробки розкладу занять із CSV-файлу формату CIST та створення вихідного файлу Google_TimeTable у форматі, придатному для імпорту в Google Calendar. Скрипт підтримує вибір академічної групи, конвертацію кодування, сортування записів і форматування часу. Нижче наведено повний аналіз із пронумерованим кодом для кожної функції.	Функція display_help (рядки 3–14) виводить довідкову інформацію про використання скрипта, включаючи опис доступних опцій (--help, --version, -q/--quiet) та параметрів (назва академічної групи та шлях до CSV-файлу). Викликається при передачі прапорця --help.3  display_help() {4 echo "Використання: $0 [--help | --version] | [[-q|--quiet] [академ_група] файл_із_cist.csv]"5  echo ""6  echo "Опції:"7  echo "  --help              Вивести цю довідку"8  echo "  --version           Вивести версію скрипта"9  echo "  -q, --quiet         Не виводити дані у стандартний потік виведення"10  echo ""11  echo "Параметри:"12  echo "  академ_група        Назва академічної групи (наприклад, ПЗПІ-23-12)"13  echo "  файл_із_cist.csv    CSV-файл із розкладом занять"14  exit 015}     Функція display_version (рядки 17–20) виводить версію скрипта (1.0) та завершує виконання. Викликається при передачі прапорця --version.17  display_version() {18      echo "Версія: 1.0"19      exit 020  }     Обробка аргументів командного рядка (рядки 22–50), яка наведена в додатку В.1 використовує цикл while для обробки аргументів:• --help: викликає display_help.• --version: викликає display_version.• -q/--quiet: встановлює прапорець quiet=1 для придушення виводу в консоль.• Інші аргументи: перший інтерпретується як назва академічної групи, другий — як шлях до файлу. Якщо передано більше двох аргументів, видається помилка.     Вибір файлу (рядки 52–75) (код наведено в додатку В.2) відбувається таким чином, що файл не вказано через аргументи, скрипт шукає файли за шаблоном TimeTable_??_??_20??.csv у поточній директорії. Користувачу пропонується вибрати файл через меню select. Якщо файли відсутні або вибір некоректний, видається помилка. Перевіряється доступність файлу для читання.     Конвертація кодування файлу (рядки 77–82) відбувається таким чином, oj перевіряється доступність файлу для читання. Вхідний файл конвертується з кодування WINDOWS-1251 у UTF-8 за допомогою iconv, а символи повернення каретки видаляються за допомогою tr. Результат зберігається у тимчасовому файлі temp_fixed.77  temp_fixed=$(mktemp)78  iconv -f WINDOWS-1251 -t UTF-8 "$file" | tr -d '\r' > "$temp_fixed" || { 79      echo "Помилка: не вдалося конвертувати кодування файлу" >&280      rm "$temp_fixed"81      exit 182  }     Вибір академічної групи (рядки 84–113), наведено в додатку В.3, виконується так що, cкрипт витягує унікальні назви груп із файлу за допомогою grep і sed. Якщо група не вказана або не знайдена:• Якщо у файлі лише одна група, вона використовується автоматично.• Інакше користувачу пропонується вибрати групу через меню select.     Формування вихідного файлу (рядки 115–139) (наведено в додатку В.4) відбувається на основі дати з імені вхідного файлу (Google_TimeTable_${date_part}.csv). Записується заголовок CSV: Subject,Start Date,Start Time,End Date,End Time,Description. Дані фільтруються за групою (якщо вказано) та сортуються за датою й часом.     Функція convert_to_12h (рядки 142–160) перетворює час із 24-годинного формату (наприклад, 14:30) у 12-годинний (наприклад, 2:30 PM). Використовується для форматування часу початку та закінчення занять.142      function convert_to_12h(time_24h) {143          split(time_24h, parts, ":")144          hour = parts[1] + 0145          minute = parts[2]147          if(hour == 0) {148              hour = 12149              ampm = "AM"150          } else if(hour == 12) {151              ampm = "PM"152          } else if(hour > 12) {153              hour = hour - 12154              ampm = "PM"155          } else {156              ampm = "AM"157          }159          return hour ":" minute " " ampm160      }     Обробка даних і нумерація занять (рядки 162–229) (код наведено в додатку В.5), в ній Основна логіка виконується в блоці awk:• Фільтруються записи, пропускаючи заголовки (/Дата*/, Тема) та порожні дати.• Визначається тип заняття (Лк — лекція, Лб — лабораторна, Пз — практична).• Нумерація занять: o Для Лб номер залежить від дати та предмета.o Для Лк і Пз номер інкрементується для кожного предмета.• Дати форматуються у формат MM/DD/YYYY, час — у 12-годинний формат.• Записи додаються до вихідного файлу у форматі CSV, вигляд вихідного файлу наведено на рис. Б1.     Після обробки видаляються тимчасові файли (temp_filtered, temp_sorted, temp_fixed). Якщо quiet=0, вміст вихідного файлу виводиться в консоль (рядки 231–237).
ВИСНОВОК     У результаті виконання завдання було розроблено Bash-скрипт для обробки розкладу занять із CSV-файлу формату CIST та створення вихідного файлу для імпорту в Google Calendar. Скрипт відповідає всім зазначеним вимогам:1. Забезпечує обробку розкладу для вказаної академічної групи з формуванням CSV-файлу у форматі Google Calendar;2. Використовує необхідні конструкції мови Bash, включаючи обробку аргументів, фільтрацію даних і сортування;3. Коректно обробляє вхідні параметри, перевіряючи наявність файлу, доступність для читання та валідність назви групи;4. Виводить повідомлення про помилки у випадку некоректних аргументів, відсутності файлів або груп, а також підтримує інтерактивний вибір файлу та групи при їх відсутності.
ДОДАТОК АВідеозаписВідеозапис презентації результатів лабораторної роботи: https://youtu.be/K9OWhgdHoDoХронологічний опис відеозапису:00:00 – Вступне представлення 00:10 – Пояснення коду скрипту08:31 – Демонстрація роботи скрипту09:13 – Перевірка результатів виконання скрипту09:44 – Додавання події до Google Calendar
ДОДАТОК БГрафічні матеріалиРисунок Б.1 — Вигляд сформованого csv файлу
ДОДАТОК ВПрограмний кодВ.1 {pzpi-23-5-salohub-andrii-task1.sh}GitHub репозиторій: https://github.com/NureSalohubAndrii/smp-pzpi-23-5-salohub-andrii/blob/main/Pract1/smp-pzpi-23-5-salohub-andrii-pract1/pzpi-23-5-salohub-andrii-task1.sh22  quiet=023  group=""24  file=""2526  while [[ $# -gt 0 ]]; do27      case $1 in28          --help)29              display_help30              ;;31          --version)32              display_version33              ;;34          -q|--quiet)35              quiet=136              shift37              ;;38          *)39              if [[ -z $group ]]; then40                  group=$141              elif [[ -z $file ]]; then42                  file=$143              else44                  echo "Помилка: забагато аргументів" >&245                  exit 146              fi47              shift48              ;;49      esac50  doneВ.2 {pzpi-23-5-salohub-andrii-task1.sh}GitHub репозиторій: https://github.com/NureSalohubAndrii/smp-pzpi-23-5-salohub-andrii/blob/main/Pract1/smp-pzpi-23-5-salohub-andrii-pract1/pzpi-23-5-salohub-andrii-task1.sh52  if [[ -z $file ]]; then53      files=$(ls TimeTable_??_??_20??.csv 2>/dev/null | sort)54      if [[ -z $files ]]; then55          echo "Помилка: у поточній директорії не знайдено файлів TimeTable_??_??_20??.csv" >&256          exit 157      fi58      echo "Виберіть файл:"59      select file in $files; do60          if [[ -z $file ]]; then61              echo "Помилка: некоректний вибір" >&262          else63              break64          fi65      done66  fi68  if [[ -z $file ]]; then69      echo "Помилка: файл не вказано" >&270      exit 171  fi72  if [[ ! -r $file ]]; then73      echo "Помилка: файл недоступний для читання: $file" >&274      exit 175  fiВ.3 {pzpi-23-5-salohub-andrii-task1.sh}GitHub репозиторій: https://github.com/NureSalohubAndrii/smp-pzpi-23-5-salohub-andrii/blob/main/Pract1/smp-pzpi-23-5-salohub-andrii-pract1/pzpi-23-5-salohub-andrii-task1.sh84  groups=$(grep -o '"[^"]*DL [А-Яа-я0-9,-]\+[^"]*"' "$temp_fixed" | sed -E 's/.*DL ([А-Яа-я0-9,-]+).*$/\1/g' | grep -v ',' | sort | uniq)86  group_count=$(echo "$groups" | wc -l)8788  if [[ $group_count -eq 0 ]]; then89      echo "Помилка: у файлі не знайдено жодної групи" >&290      rm "$temp_fixed"91      exit 192  fi9394  if [[ -z "$group" || -z $(echo "$groups" | grep -x "$group") ]]; then95      if [[ $group_count -eq 1 ]]; then96          group="$groups"97          echo "Використовується єдина знайдена група: $group" >&298      else99          if [[ -n "$group" ]]; then100              echo "Помилка: вказана група '$group' не знайдена у файлі." >&2101          fi102          echo "Доступні групи:" >&2103          echo "$groups" >&2104          echo "Виберіть групу:"105          select group in $groups; do106              if [[ -z "$group" ]]; then107                  echo "Помилка: некоректний вибір" >&2108              else109                  break110              fi111          done112      fi113  fiВ.4 {pzpi-23-5-salohub-andrii-task1.sh}GitHub репозиторій: https://github.com/NureSalohubAndrii/smp-pzpi-23-5-salohub-andrii/blob/main/Pract1/smp-pzpi-23-5-salohub-andrii-pract1/pzpi-23-5-salohub-andrii-task1.sh115  date_part=$(echo "$file" | sed 's/TimeTable_\(.*\).csv/\1/')116  output_file="Google_TimeTable_${date_part}.csv"118  if [[ $quiet -eq 0 ]]; then119      echo "Обробка записів для групи: $group"122  temp_filtered=$(mktemp)123  temp_sorted=$(mktemp)125  if [[ $group_count -eq 1 ]]; then126      grep -o "\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\"" "$temp_fixed" > "$temp_filtered"127  else128      grep -o "\"$group - [^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\"" "$temp_fixed" > "$temp_filtered"129  fi131  awk -F'"' '132      $4 !~ /\/Дата\*\// && $2 !~ /Тема/ && $4 != "" {133          split($4, date_parts, ".")134          sort_date = sprintf("%04d%02d%02d", date_parts[3], date_parts[2], date_parts[1])135          print sort_date "|" $6 "|" $0136      }137  ' "$temp_filtered" | sort > "$temp_sidebar139  echo "Subject,Start Date,Start Time,End Date,End Time,Description" > "$output_file"В.5 {pzpi-23-5-salohub-andrii-task1.sh}GitHub репозиторій: https://github.com/NureSalohubAndrii/smp-pzpi-23-5-salohub-andrii/blob/main/Pract1/smp-pzpi-23-5-salohub-andrii-pract1/pzpi-23-5-salohub-andrii-task1.sh162      {163          line = $3164          split(line, fields, "\"")165166          subject = fields[2]167          start_date = fields[4]168          start_time = fields[6]169          end_date = fields[8]170          end_time = fields[10]171172          clean_subject = subject173          gsub(/^[А-ЯІЇЄа-яіїє0-9-]+ - /, "", clean_subject)174175          if(clean_subject ~ /Лб/) {176              type = "Лб"177              key_subject = clean_subject178              gsub(/ DL.*/, "", key_subject)179              key = key_subject "_" type "_" start_date180          } else if(clean_subject ~ /Пз/) {181              type = "Пз"182              key_subject = clean_subject183              gsub(/ DL.*/, "", key_subject)184              key = key_subject "_" type185          } else {186              type = "Лк"187              key_subject = clean_subject188              gsub(/ DL.*/, "", key_subject)189              key = key_subject "_" type190          }191192          if(key in lesson_counters) {193              if(type != "Лб") {194                  lesson_counters[key]++195              }196          } else {197              if(type == "Лб") {198                  max_num = 0199                  for(k in lesson_counters) {200                      if(index(k, key_subject "_" type "_") == 1) {201                          if(lesson_counters[k] > max_num) {202                              max_num = lesson_counters[k]203                          }204                      }205                  }206                  lesson_counters[key] = max_num + 1207              } else {208                  lesson_counters[key] = 1209              }210          }211212          lesson_number = lesson_counters[key]213214          split(start_date, sd_parts, ".")215          split(end_date, ed_parts, ".")216          formatted_start_date = sd_parts[2] "/" sd_parts[1] "/" sd_parts[3]217          formatted_end_date = ed_parts[2] "/" ed_parts[1] "/" sd_parts[3]218219          formatted_start_time = convert_to_12h(start_time)220          formatted_end_time = convert_to_12h(end_time)221222          subject_output = clean_subject "; №" lesson_number223          description = clean_subject224225          record = "\"" subject_output "\",\"" formatted_start_date "\",\"" formatted_start_time "\",\"" formatted_end_date "\",\"" formatted_end_time "\",\"" description "\""226227          print record228      }229  ' "$temp_sorted" >> "$output_file"2