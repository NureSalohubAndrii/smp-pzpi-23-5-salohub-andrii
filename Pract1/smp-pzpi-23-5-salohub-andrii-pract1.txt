МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИКАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇЗвітз практичної роботи № 1 з дисципліниСкриптові мови програмуванняВиконала:                                                                         Перевірив:ст. гр. ПЗПІ-23-5                        				ст. викладач кафедри ПІСалогуб Андрій 						          Сокорчук Ігор ПетровичХарків 2025
1 ІСТОРІЯ ЗМІН№ДатаВерсія звітуОпис змін та виправлень112.05.20250.1Створено розділ “Історія Змін”
2 ЗАВДАННЯ     Написатати Bash скрипт, який друкуватиме на екрані ялинку іздвох ярусів гілок, стовбура та шару снігу.     Наприклад таку:          *          ###        *****      #######    *********          ###        *****      #######    *********         ###         ###  ***********       Ялинка повинна бути симетричною.     Яруси гілок повинні утворювати правильні рівнобедрені трикутники у яких сусідні рядки відрізняються на два символи та складаються почергово або з символів «*» або з символів «#» наприклад як такий:       *       ###     *****   #######        Ширина усіх ярусів гілок повинна бути на 2 символи вужча ніж ширина снігу.     Висота стовбура та товщина снігу мають бути завжди такі, як у прикладі.     Висота ялинки у рядках разом з шаром снігу та ширина шару снігу в символах вказується скрипту в його параметрах при запуску.     Параметри скрипта повинні мати додатнє значення.     Вказані значення повинні округлятися до потрібних у меншу сторону.     Якщо за вказаними при запуску скрипта значеннями зобразити ялинку на екрані неможливо, скрипт повинен вивести у потік помилок сповіщення про неправильне значення аргумента і повернути відповідний результат у батьківський процес.     У скрипті потрібно обовʼязково використати такі конструкції:if ... then ... fi  while ... do ... done  until ... do ... done  for ... in .. do ... done  for ((...)); do ... done       У скрипті також потрібно використати функцію.       Ім’я скрипта: ~/{імʼя-облікового-запису}-task1     Приклад виклику скрипта: ~/pzpiz-26-7-shukhevych-roman-task1 16 11     Файл скрипта повинен бути виконуваним файлом для усіх користуачів системи.     Право редагувати файл скрипта повинен мати лише власник скрипта.
3 ОПИС ВИКОНАНОЇ РОБОТИ     Розробити Bash-скрипт призначений для генерації зображення ялинки в текстовому форматі з урахуванням заданих параметрів висоти дерева та ширини снігу.      Функція validate_inputs (рядки 2–22) наведена в додатку В.1 перевіряє правильність переданих аргументів:- Кількість аргументів має бути рівною 2;- Висота ялинки не менше 8;- Ширина снігової платформи повинна відповідати межам, що залежать від висоти.     Функція print_centered_line (рядки 24–29) друкує рядок із заданим символом (* або #), вирівнюючи його по центру відносно загальної ширини. Використовується для побудови ярусів дерева.24  print_centered_line() {25      local width=$1 symbol=$2 total_width=$326      local spaces=$(( (total_width - width) / 2 + 1 ))27      echo -n "$(for i in $(seq 1 $spaces); do echo -n " "; done)"28      echo "$(for i in $(seq 1 $width); do echo -n "$symbol"; done)"29  }     Функція draw_tier (рядки 31–51) наведена в додатку В.2 створює ярус дерева з чергуванням символів * та #. Виконується це в три етапи:1. Верхня половина ярусу — until цикл (рядки 37–41);2. Нижня половина — while цикл (рядки 42–46);3. Завершальний цикл будує ще раз ярус для завершення структури (рядки 47–50).     Функція draw_trunk_and_snow (рядки 53–61) малює два рядки стовбура (###), вирівняні по центру, та один ряд снігу зі *.53  draw_trunk_and_snow() {54      local snow_width=$155      local pad=$(( (snow_width - 3) / 2 ))56      for trunk in 1 2; do57          echo "$(for i in $(seq 1 $pad); do echo -n " "; done)###"58      done59      echo -n "$(for i in $(seq 1 $snow_width); do echo -n "*"; done)"60      echo ""61  }     Рядки 63–68 відповідають за виклик всіх функцій.63  validate_inputs "$@"64  tree_height=$(( $1 - ($1 % 2) ))65  snow_width=$(( tree_height - 1 ))66  draw_tier $(((tree_height - 1) / 2)) $((snow_width - 2))67  draw_trunk_and_snow "$snow_width"68  # EOF     В цьому коді:- validate_inputs "$@" — перевірка аргументів;- tree_height округлюється до парного значення (рядок 64);- snow_width зменшується на 1 (рядок 65), щоб бути непарною;- draw_tier та draw_trunk_and_snow — основні візуальні функції побудови дерева.Результат виконання коду при введені некоректної кількості параметрів наведено на рис. Б.1, результат роботи коду при некоректно введених значення параметрів наведено на рис. Б.2, результат виконання коду при введені коректних параметрів наведено на рис. Б.3.
4 ВИСНОВКИ     У результаті виконання завдання було розроблено Bash-скрипт для генерації зображення ялинки в текстовому форматі. Скрипт відповідає всім зазначеним вимогам:1. Генерує симетричну ялинку з двома ярусами гілок, стовбуром та шаром снігу;2. Використовує вказані у завданні конструкції мови Bash;3. Коректно обробляє вхідні параметри та перевіряє їх на відповідність вимогам;4. Виводить повідомлення про помилку у випадку невідповідності параметрів.   
ДОДАТОК АВІДЕОЗАПИСРобота була перевірена на парі.
ДОДАТОК БГрафічні матеріалиРисунок Б.1 — Результат роботи коду при введенні некоректної кількості параметрівРисунок Б.2 — Результат роботи коду при введенні некоректних значень параметрівРисунок Б.3 — Результа роботи коду при коректних параметрах 
ДОДАТОК ВПрограмний кодВ.1 {pzpi-23-5-salohub-andrii-task1.sh}GitHub репозиторій: https://github.com/NureSalohubAndrii/smp-pzpi-23-5-salohub-andrii/blob/main/Pract1/smp-pzpi-23-5-salohub-andrii-pract1/pzpi-23-5-salohub-andrii-task1.sh2  validate_inputs() {3      if (( $# != 2 )); then4          echo "Помилка: Вкажіть два аргументи: висоту дерева та ширину снігу." >&25          exit 16      fi7      local height=$1 snow=$28      if (( height < 8 )); then9          echo "Помилка: Мінімальна висота дерева - 8. Вказано: $height." >&210          exit 111      fi12      local max_snow_width=$(( height - (height % 2) ))13      local min_snow_width=$(( max_snow_width - 1 ))14      if (( snow < min_snow_width )); then15          echo "Помилка: Мінімальна ширина снігу: $min_snow_width." >&216          exit 117      fi18      if (( snow > max_snow_width )); then19          echo "Помилка: Максимальна ширина снігу: $max_snow_width." >&220          exit 121      fi22  }В.2 {pzpi-23-5-salohub-andrii-task1.sh}GitHub репозиторій: https://github.com/NureSalohubAndrii/smp-pzpi-23-5-salohub-andrii/blob/main/Pract1/smp-pzpi-23-5-salohub-andrii-pract1/pzpi-23-5-salohub-andrii-task1.sh31  draw_tier() {32      local tier_height=$133      tier_max_width=$234      local symbols=("*" "#")35      local index=036      i=137      until (( i > tier_height / 2 )); do38          print_centered_line $(( 1 + (i - 1) * 2 )) "${symbols[$index]}" "$tier_max_width"39          index=$((1 - index))40          ((i++))41      done42      while (( i <= tier_height )); do43          print_centered_line $(( 1 + (i - 1) * 2 )) "${symbols[$index]}" "$tier_max_width"44          index=$((1 - index))45          ((i++))46      done47      for (( row = 2; row <= tier_height; row++ )); do48          print_centered_line $(( 1 + (row - 1) * 2 )) "${symbols[$index]}" "$tier_max_width"49          index=$((1 - index))50      done51  }2
